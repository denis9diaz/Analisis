<script is:inline>
  const token = localStorage.getItem("access_token");
  if (!token) {
    window.location.href = "/inicio-sesion";
  }
</script>

<div
  class="min-h-screen bg-gray-200 text-black py-20 px-4"
  data-api-url={import.meta.env.PUBLIC_API_URL}
>
  <div class="max-w-2xl mx-auto space-y-10">
    <!-- 🧑 Perfil -->
    <section
      class="bg-white rounded-lg border border-gray-200 p-6 shadow-sm space-y-4"
    >
      <h2 class="text-lg font-medium text-gray-800">Perfil</h2>

      <div>
        <label class="block text-sm font-medium text-gray-600 mb-1"
          >Username</label
        >
        <div class="flex items-center gap-2">
          <input
            id="username-input"
            class="w-full border border-gray-300 rounded px-3 py-1.5 text-sm"
            disabled
          />
          <button
            id="edit-username"
            class="text-gray-500 hover:text-blue-600 text-sm cursor-pointer">✏️</button
          >
          <button
            id="save-username"
            class="bg-blue-600 text-white rounded px-3 py-1.5 text-sm hidden"
          >
            Guardar
          </button>
        </div>
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-600 mb-1">Email</label
        >
        <input
          id="email-input"
          class="w-full border border-gray-200 rounded px-3 py-1.5 text-sm bg-gray-100"
          disabled
        />
      </div>
    </section>

    <!-- 💳 Suscripción -->
    <section
      id="suscripcion-section"
      class="bg-white rounded-lg border border-gray-200 p-6 shadow-sm space-y-4"
      style="display: none;"
    >
      <h2 class="text-lg font-medium text-gray-800">Suscripción</h2>
      <p id="suscripcion-mensaje" class="text-sm text-gray-700">
        Plan: <strong id="suscripcion-plan" class="text-green-700"></strong><br
        />
        Válida hasta: <span id="suscripcion-fecha" class="font-medium"></span>
      </p>
      <button
        id="abrir-gestionar-modal"
        class="text-sm text-blue-600 hover:underline mt-2 cursor-pointer"
      >
        Gestionar suscripción
      </button>
    </section>

    <!-- 📊 Resumen -->
    <section
      id="resumen-section"
      class="bg-white rounded-lg border border-gray-200 p-6 shadow-sm space-y-4"
    >
      <h2 class="text-lg font-medium text-gray-800">Resumen</h2>

      <div class="grid grid-cols-2 gap-4">
        <div class="bg-gray-100 rounded p-4 text-center">
          <p class="text-sm text-gray-600">Métodos creados</p>
          <p id="metodos-count" class="text-xl font-semibold">0</p>
        </div>
        <div class="bg-gray-100 rounded p-4 text-center">
          <p class="text-sm text-gray-600">Partidos registrados</p>
          <p id="partidos-count" class="text-xl font-semibold">0</p>
        </div>
      </div>
    </section>

    <!-- ⚙️ Opciones avanzadas -->
    <section class="text-center text-sm text-gray-500 space-y-2 mt-10">
      <a href="cambiar-contraseña" class="hover:text-blue-600 underline"
        >Cambiar contraseña</a
      ><br />
      <a href="/eliminar" class="hover:text-red-600 underline"
        >Eliminar cuenta</a
      >
    </section>
  </div>

  <!-- 🔔 Toast Notification -->
  <div
    id="toast"
    class="fixed top-32 left-1/2 -translate-x-1/2 px-6 py-3 rounded-xl shadow-md opacity-0 transition-all duration-300 pointer-events-none z-50 text-sm font-medium"
  >
    Acción completada
  </div>

  <!-- Modal de confirmación para eliminar cuenta -->
  <div
    id="delete-modal"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden"
  >
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-sm w-full">
      <h2 class="text-lg font-semibold text-gray-800 mb-2">¿Estás seguro?</h2>
      <p class="text-sm text-gray-600 mb-4">
        Esta acción eliminará tu cuenta permanentemente y no podrás recuperarla.
      </p>
      <div class="flex justify-end gap-4">
        <button
          id="cancel-delete"
          class="text-sm text-gray-600 hover:text-blue-600">Volver atrás</button
        >
        <button
          id="confirm-delete"
          class="text-sm bg-red-800 text-white px-4 py-1.5 rounded hover:bg-red-900"
        >
          Eliminar
        </button>
      </div>
    </div>
  </div>

  <!-- Modal: Gestionar suscripción -->
  <div
    id="modal-gestionar"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden"
  >
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full space-y-4">
      <h2 class="text-lg font-semibold text-gray-800">Gestionar suscripción</h2>
      <p id="mensaje-modal-suscripcion" class="text-sm text-gray-600">
        Puedes cancelar tu suscripción o cambiar de plan. Si eliges un nuevo
        plan y aún tienes días activos, se añadirán al total y se actualizará el
        tipo de suscripción.
      </p>

      <div class="flex flex-col gap-3">
        <button
          id="btn-renovar"
          class="border border-blue-600 text-blue-600 py-2.5 px-6 rounded-xl hover:bg-blue-50 transition duration-300 text-sm font-semibold cursor-pointer"
        >
          Renovar / Cambiar de plan
        </button>
        <button
          id="btn-cancelar"
          class="border border-rose-600 text-rose-600 py-2.5 px-6 rounded-xl hover:bg-rose-50 transition duration-300 text-sm font-semibold cursor-pointer"
        >
          Cancelar suscripción
        </button>
      </div>

      <div class="text-right pt-2">
        <button id="cerrar-modal" class="text-sm text-gray-500 hover:underline"
          >Cerrar</button
        >
      </div>
    </div>
  </div>

  <!-- Modal de confirmación de cancelación -->
  <div
    id="modal-cancelar-confirmacion"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden"
  >
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-sm w-full space-y-4">
      <h2 class="text-lg font-semibold text-gray-800">
        ¿Seguro que quieres cancelar?
      </h2>
      <p id="cancelacion-texto" class="text-sm text-gray-700">
        Tu suscripción seguirá activa hasta el día <strong>XX/XX/XXXX</strong>.
      </p>
      <div class="flex justify-end gap-4 pt-2">
        <button
          id="cancelar-cancelacion"
          class="text-sm text-gray-600 hover:text-blue-600">Volver atrás</button
        >
        <button
          id="confirmar-cancelacion"
          class="border border-rose-600 text-rose-600 py-2.5 px-6 rounded-xl hover:bg-rose-50 transition duration-300 text-sm font-semibold cursor-pointer"
        >
          Cancelar suscripción
        </button>
      </div>
    </div>
  </div>

  <script type="module">
    const access = localStorage.getItem("access_token");

    const API_URL = document
      .querySelector("[data-api-url]")
      .getAttribute("data-api-url");

    const authFetch = (url, options = {}) => {
      return fetch(`${API_URL}${url}`, {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${access}`,
        },
        ...options,
      });
    };

    const usernameInput = document.getElementById("username-input");
    const emailInput = document.getElementById("email-input");
    const editBtn = document.getElementById("edit-username");
    const saveBtn = document.getElementById("save-username");
    const statsMetodos = document.getElementById("metodos-count");
    const statsPartidos = document.getElementById("partidos-count");

    async function loadUser() {
      const res = await authFetch("/api/auth/me/");
      if (res.ok) {
        const data = await res.json();
        usernameInput.value = data.username;
        emailInput.value = data.email;
      } else {
        showToast("No se pudo cargar tu perfil", "error");
      }

      const statsRes = await authFetch("/api/general/stats/");
      if (statsRes.ok) {
        const stats = await statsRes.json();
        statsMetodos.textContent = stats.metodos;
        statsPartidos.textContent = stats.partidos;
      }
    }

    editBtn.addEventListener("click", () => {
      usernameInput.disabled = false;
      saveBtn.classList.remove("hidden");
    });

    saveBtn.addEventListener("click", async () => {
      const newUsername = usernameInput.value.trim();
      const currentUsername = localStorage.getItem("username");

      if (!newUsername) {
        showToast("El username no puede estar vacío", "warning");
        return;
      }

      if (newUsername === currentUsername) {
        showToast("El username es el mismo que el actual", "info");
        return;
      }

      const res = await authFetch("/api/auth/update-username/", {
        method: "PATCH",
        body: JSON.stringify({ username: newUsername }),
      });

      const data = await res.json();

      if (res.ok) {
        localStorage.setItem("username", newUsername);
        usernameInput.disabled = true;
        saveBtn.classList.add("hidden");
        showToast("Username actualizado", "success");

        // 🔄 Refrescar header con nuevo username
        if (typeof window.checkToken === "function") {
          window.checkToken();
        }
      } else if (data?.error) {
        showToast(data.error, "error");
      } else {
        showToast("Error al actualizar el username", "error");
      }
    });

    function showToast(message = "Acción completada", type = "success") {
      const toast = document.getElementById("toast");
      if (!toast) return;

      const styleMap = {
        success: "bg-emerald-100 text-emerald-800 border border-emerald-300",
        error: "bg-rose-100 text-rose-800 border border-rose-300",
        info: "bg-blue-100 text-blue-800 border border-blue-300",
        warning: "bg-yellow-100 text-yellow-800 border border-yellow-300",
      };

      toast.className =
        "fixed top-20 left-1/2 -translate-x-1/2 px-6 py-3 rounded-xl shadow-md opacity-0 transition-all duration-300 pointer-events-none z-50 text-sm font-medium";

      toast.classList.add(...(styleMap[type] || styleMap.success).split(" "));
      toast.textContent = message;

      // Mostrar
      toast.classList.remove("opacity-0");
      toast.classList.add("opacity-100");

      // Ocultar tras 3s
      setTimeout(() => {
        toast.classList.remove("opacity-100");
        toast.classList.add("opacity-0");
      }, 3000);
    }

    loadUser();
    loadSuscripcion();

    async function loadSuscripcion() {
      const res = await authFetch("/api/general/suscripcion/");
      const section = document.getElementById("suscripcion-section");
      const mensaje = document.getElementById("suscripcion-mensaje");
      const abrirModalBtn = document.getElementById("abrir-gestionar-modal");
      const resumen = document.getElementById("resumen-section");

      section.style.display = "block";

      if (!res.ok) {
        mensaje.textContent = "No estás suscrito."; // Mensaje si no hay suscripción activa
        abrirModalBtn.style.display = "none";
        resumen.innerHTML =
          "<p class='text-sm text-gray-500 text-center'>Contrata un plan para ver tu resumen.</p>";
        return;
      }

      const data = await res.json();
      if (!data || !data.activa) {
        mensaje.textContent = "No estás suscrito."; // Cambia este mensaje si no hay suscripción activa
        abrirModalBtn.style.display = "none";
        resumen.innerHTML =
          "<p class='text-sm text-gray-500 text-center'>Contrata un plan para ver tu resumen.</p>";
        return;
      }

      // Si hay suscripción activa, mostramos los datos correctamente
      const fechaTexto = new Date(data.fecha_fin).toLocaleDateString();
      let mensajeFinal = "";

      if (data.cancelada) {
        mensajeFinal = `Plan: <strong class="text-green-700">${data.plan}</strong><br/>Válida hasta: <span class="font-medium">${fechaTexto}</span>`;
      } else {
        mensajeFinal = `Plan: <strong class="text-green-700">${data.plan}</strong><br/>Se renovará el día <span class="font-medium">${fechaTexto}</span>`;
      }

      mensaje.innerHTML = mensajeFinal;
    }

    // Eliminar cuenta con confirmación
    const deleteLink = document.querySelector('a[href="/eliminar"]');
    const modal = document.getElementById("delete-modal");
    const cancelBtn = document.getElementById("cancel-delete");
    const confirmBtn = document.getElementById("confirm-delete");

    deleteLink.addEventListener("click", (e) => {
      e.preventDefault();
      modal.classList.remove("hidden");
    });

    cancelBtn.addEventListener("click", () => {
      modal.classList.add("hidden");
    });

    confirmBtn.addEventListener("click", async () => {
      const res = await authFetch("/api/auth/delete-user/", {
        method: "DELETE",
      });

      if (res.ok) {
        localStorage.clear();
        showToast("Cuenta eliminada", "success");
        setTimeout(() => {
          window.location.href = "/";
        }, 1500);
      } else {
        showToast("Error al eliminar cuenta", "error");
        modal.classList.add("hidden");
      }
    });

    // Modal gestionar suscripción
    const gestionarModal = document.getElementById("modal-gestionar");
    const abrirModalBtn = document.getElementById("abrir-gestionar-modal");
    const cerrarModalBtn = document.getElementById("cerrar-modal");
    const cancelarBtn = document.getElementById("btn-cancelar");
    const renovarBtn = document.getElementById("btn-renovar");

    cerrarModalBtn?.addEventListener("click", () => {
      gestionarModal.classList.add("hidden");
    });

    abrirModalBtn?.addEventListener("click", async () => {
      const res = await authFetch("/api/general/suscripcion/");
      const data = await res.json();

      const mensajeModal = document.getElementById("mensaje-modal-suscripcion");

      if (data.cancelada) {
        cancelarBtn.classList.add("hidden");
        const fechaFin = new Date(data.fecha_fin).toLocaleDateString();
        mensajeModal.innerHTML = `Tu suscripción está cancelada. Puedes seguir usando los servicios de pago hasta el día <strong>${fechaFin}</strong>.`;
      } else {
        cancelarBtn.classList.remove("hidden");
        mensajeModal.textContent =
          "Puedes cancelar tu suscripción o cambiar de plan. Si eliges un nuevo plan y aún tienes días activos, se añadirán al total y se actualizará el tipo de suscripción.";
      }

      renovarBtn.classList.remove("hidden");
      gestionarModal.classList.remove("hidden");
    });

    // Cancelar suscripción
    // Mostrar modal de confirmación con la fecha real
    let fechaFinSuscripcion = null;

    cancelarBtn?.addEventListener("click", async () => {
      const res = await authFetch("/api/general/suscripcion/");
      if (!res.ok) {
        showToast("Error al obtener la fecha de tu suscripción", "error");
        return;
      }

      const data = await res.json();
      fechaFinSuscripcion = new Date(data.fecha_fin).toLocaleDateString();

      const texto = document.getElementById("cancelacion-texto");
      texto.innerHTML = `Tu suscripción seguirá activa hasta el día <strong>${fechaFinSuscripcion}</strong>. ¿Quieres cancelarla?`;

      document
        .getElementById("modal-cancelar-confirmacion")
        .classList.remove("hidden");
    });

    // Confirmar cancelación real
    document
      .getElementById("confirmar-cancelacion")
      ?.addEventListener("click", async () => {
        const res = await authFetch("/api/general/suscripcion/", {
          method: "PATCH",
          body: JSON.stringify({ cancelar: true }),
        });

        if (res.ok) {
          const data = await res.json();
          const fechaFin = new Date(data.fecha_fin).toLocaleDateString();

          showToast(
            `Tu suscripción ha sido cancelada. Seguirá activa hasta el ${fechaFin}.`,
            "info"
          );

          document
            .getElementById("modal-cancelar-confirmacion")
            .classList.add("hidden");
          gestionarModal.classList.add("hidden");

          setTimeout(() => window.location.reload(), 3000);
        } else {
          showToast("Error al cancelar suscripción", "error");
        }
      });

    // Cerrar modal de confirmación
    document
      .getElementById("cancelar-cancelacion")
      ?.addEventListener("click", () => {
        document
          .getElementById("modal-cancelar-confirmacion")
          .classList.add("hidden");
      });

    // Renovar / cambiar plan
    renovarBtn?.addEventListener("click", async () => {
      // Verificar si la suscripción está cancelada
      const res = await authFetch("/api/general/suscripcion/");
      const data = await res.json();

      if (data.cancelada) {
        // Ya ha sido cancelada, no mostrar el botón cancelar
        cancelarBtn.classList.add("hidden");
      } else {
        // Aún no ha sido cancelada, permitir cancelación
        cancelarBtn.classList.remove("hidden");
      }

      renovarBtn.classList.remove("hidden"); // Siempre se puede renovar

      window.location.href = "/planes"; // Redirigir a la página de planes
    });
  </script>
</div>
