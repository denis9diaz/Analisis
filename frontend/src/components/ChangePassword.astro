<div class="flex items-start justify-center min-h-screen bg-gray-200 pt-20 px-4 text-gray-800">
  <div class="w-full max-w-md bg-white p-8 rounded-2xl shadow-xl">
    <h2 class="text-2xl font-bold mb-6 text-center text-gray-800">
      Cambiar contraseña
    </h2>

    <form id="password-form" class="space-y-4">
      <div>
        <label class="block text-sm text-gray-700 mb-1">Contraseña actual</label>
        <div class="relative">
          <input
            type="password"
            id="current-password"
            spellcheck="false"
            placeholder="Escribe tu contraseña actual"
            class="w-full border border-gray-300 rounded px-3 py-2 text-sm pr-10"
            required
          />
          <button
            type="button"
            id="toggle-current"
            class="absolute inset-y-0 right-3 px-2 text-gray-500 text-lg"
            tabindex="-1"
          >
            <i id="eye-current" class="fa-solid fa-eye-slash"></i>
          </button>
        </div>
      </div>

      <div>
        <label class="block text-sm text-gray-700 mb-1">Nueva contraseña</label>
        <div class="relative">
          <input
            type="password"
            id="new-password"
            spellcheck="false"
            placeholder="Escribe tu nueva contraseña"
            class="w-full border border-gray-300 rounded px-3 py-2 text-sm pr-10"
            required
          />
          <button
            type="button"
            id="toggle-new"
            class="absolute inset-y-0 right-3 px-2 text-gray-500 text-lg"
            tabindex="-1"
          >
            <i id="eye-new" class="fa-solid fa-eye-slash"></i>
          </button>
        </div>
      </div>

      <div>
        <label class="block text-sm text-gray-700 mb-1">Confirmar nueva contraseña</label>
        <div class="relative">
          <input
            type="password"
            id="confirm-password"
            spellcheck="false"
            placeholder="Repite tu nueva contraseña"
            class="w-full border border-gray-300 rounded px-3 py-2 text-sm pr-10"
            required
          />
          <button
            type="button"
            id="toggle-confirm"
            class="absolute inset-y-0 right-3 px-2 text-gray-500 text-lg"
            tabindex="-1"
          >
            <i id="eye-confirm" class="fa-solid fa-eye-slash"></i>
          </button>
        </div>
      </div>

      <button
        type="submit"
        class="w-full bg-blue-600 hover:bg-blue-700 text-white rounded py-2 text-sm"
      >
        Guardar contraseña
      </button>
    </form>

    <p class="text-sm text-center text-gray-500 mt-6">
      ¿Olvidaste tu contraseña?
      <a href="/recuperar-contraseña" class="text-blue-600 hover:underline">
        Recupérala aquí
      </a>
    </p>
  </div>
</div>

<!-- Toast -->
<div
  id="toast"
  class="fixed bottom-6 right-6 text-white px-4 py-2 rounded shadow-md text-sm opacity-0 transition-opacity duration-300 pointer-events-none z-50"
>
</div>

<script type="module">
  const form = document.getElementById("password-form");
  const current = document.getElementById("current-password");
  const nueva = document.getElementById("new-password");
  const confirm = document.getElementById("confirm-password");

  const access = localStorage.getItem("access_token");

  const authFetch = (url, options = {}) => {
    return fetch(`http://localhost:8000${url}`, {
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${access}`,
      },
      ...options,
    });
  };

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    try {
      const res = await authFetch("/api/auth/change-password/", {
        method: "POST",
        body: JSON.stringify({
          old_password: current.value,
          new_password: nueva.value,
          repeat_password: confirm.value,
        }),
      });

      const contentType = res.headers.get("content-type");
      if (!contentType || !contentType.includes("application/json")) {
        throw new Error("La respuesta no es JSON.");
      }

      const data = await res.json();

      if (res.ok) {
        showToast("Contraseña cambiada con éxito", "success");
        current.value = "";
        nueva.value = "";
        confirm.value = "";
        setTimeout(() => {
          window.location.href = "/";
        }, 2000);
      } else {
        // Mostrar errores por campo
        if (data.old_password) {
          const msg = Array.isArray(data.old_password)
            ? data.old_password[0]
            : data.old_password;
          showToast(msg, "error");
        } else if (data.new_password) {
          const msg = Array.isArray(data.new_password)
            ? data.new_password[0]
            : data.new_password;
          showToast(`Contraseña inválida: ${msg}`, "error");
        } else if (data.repeat_password) {
          const msg = Array.isArray(data.repeat_password)
            ? data.repeat_password[0]
            : data.repeat_password;
          showToast(msg, "warning");
        } else {
          showToast("No se pudo cambiar la contraseña", "error");
        }
        console.error("Errores del backend:", data);
      }
    } catch (err) {
      console.error("Error de conexión al backend:", err);
      if (err instanceof TypeError && err.message.includes("Failed to fetch")) {
        showToast("No se pudo conectar con el servidor", "error");
      } else {
        showToast("Error inesperado", "error");
      }
    }
  });

  function showToast(message = "Acción completada", type = "success") {
    const toast = document.getElementById("toast");
    if (!toast) return;

    const colorClasses = {
      success: "bg-green-600",
      error: "bg-red-600",
      info: "bg-blue-600",
      warning: "bg-yellow-500 text-black", // varias clases
    };

    toast.className =
      "fixed bottom-6 right-6 text-white px-4 py-2 rounded shadow-md text-sm opacity-0 transition-opacity duration-300 pointer-events-none z-50";

    const colorClass = (colorClasses[type] || colorClasses.success).split(" ");
    toast.classList.add(...colorClass); // ✅ aquí el fix

    toast.textContent = message;
    toast.classList.remove("opacity-0");
    toast.classList.add("opacity-100");

    setTimeout(() => {
      toast.classList.add("opacity-0");
      toast.classList.remove("opacity-100");
    }, 2500);
  }

  const setupToggle = (inputId, btnId, iconId) => {
    const input = document.getElementById(inputId);
    const btn = document.getElementById(btnId);
    const icon = document.getElementById(iconId);

    btn.addEventListener("click", () => {
      const hidden = input.type === "password";
      input.type = hidden ? "text" : "password";
      icon.className = hidden ? "fa-solid fa-eye" : "fa-solid fa-eye-slash";
    });
  };

  setupToggle("current-password", "toggle-current", "eye-current");
  setupToggle("new-password", "toggle-new", "eye-new");
  setupToggle("confirm-password", "toggle-confirm", "eye-confirm");
</script>
